ImageFolder
The ImageFolder is a dataset builder designed to quickly load an image dataset with several thousand images without requiring you to write any code.

ðŸ’¡ Take a look at the Split pattern hierarchy to learn more about how ImageFolder creates dataset splits based on your dataset repository structure.

ImageFolder automatically infers the class labels of your dataset based on the directory name. Store your dataset in a directory structure like:


folder/train/dog/golden_retriever.png
folder/train/dog/german_shepherd.png
folder/train/dog/chihuahua.png

folder/train/cat/maine_coon.png
folder/train/cat/bengal.png
folder/train/cat/birman.png
Then users can load your dataset by specifying imagefolder in load_dataset() and the directory in data_dir:


from datasets import load_dataset

dataset = load_dataset("imagefolder", data_dir="/path/to/folder")
You can also use imagefolder to load datasets involving multiple splits. To do so, your dataset directory should have the following structure:


folder/train/dog/golden_retriever.png
folder/train/cat/maine_coon.png
folder/test/dog/german_shepherd.png
folder/test/cat/bengal.png
If all image files are contained in a single directory or if they are not on the same level of directory structure, label column wonâ€™t be added automatically. If you need it, set drop_labels=False explicitly.

If there is additional information youâ€™d like to include about your dataset, like text captions or bounding boxes, add it as a metadata.csv file in your folder. This lets you quickly create datasets for different computer vision tasks like text captioning or object detection. You can also use a JSONL file metadata.jsonl.


folder/train/metadata.csv
folder/train/0001.png
folder/train/0002.png
folder/train/0003.png
You can also zip your images:


folder/metadata.csv
folder/train.zip
folder/test.zip
folder/valid.zip
Your metadata.csv file must have a file_name column which links image files with their metadata:


file_name,additional_feature
0001.png,This is a first value of a text feature you added to your images
0002.png,This is a second value of a text feature you added to your images
0003.png,This is a third value of a text feature you added to your images
or using metadata.jsonl:


{"file_name": "0001.png", "additional_feature": "This is a first value of a text feature you added to your images"}
{"file_name": "0002.png", "additional_feature": "This is a second value of a text feature you added to your images"}
{"file_name": "0003.png", "additional_feature": "This is a third value of a text feature you added to your images"}
If metadata files are present, the inferred labels based on the directory name are dropped by default. To include those labels, set drop_labels=False in load_dataset.

Image captioning
Image captioning datasets have text describing an image. An example metadata.csv may look like:


file_name,text
0001.png,This is a golden retriever playing with a ball
0002.png,A german shepherd
0003.png,One chihuahua
Load the dataset with ImageFolder, and it will create a text column for the image captions:


dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["text"]
"This is a golden retriever playing with a ball"
Object detection
Object detection datasets have bounding boxes and categories identifying objects in an image. An example metadata.jsonl may look like:


{"file_name": "0001.png", "objects": {"bbox": [[302.0, 109.0, 73.0, 52.0]], "categories": [0]}}
{"file_name": "0002.png", "objects": {"bbox": [[810.0, 100.0, 57.0, 28.0]], "categories": [1]}}
{"file_name": "0003.png", "objects": {"bbox": [[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]], "categories": [2, 2]}}
Load the dataset with ImageFolder, and it will create a objects column with the bounding boxes and the categories:


dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["objects"]
{"bbox": [[302.0, 109.0, 73.0, 52.0]], "categories": [0]}